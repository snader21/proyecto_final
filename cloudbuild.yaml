options:
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON

substitutions:
  _PORT: "3000"
  _SERVICE: "none"

steps:
  # Build and push to Artifact Registry
  - name: "gcr.io/cloud-builders/gcloud"
    id: "build-and-push"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Authenticate Docker
        gcloud auth configure-docker us-central1-docker.pkg.dev

        # Detect service from commit message if _SERVICE is "none"
        if [ "${_SERVICE}" = "none" ]; then
          if echo "${_COMMIT_MESSAGE}" | grep -q "desplegar orquestador"; then
            export _SERVICE="orquestador"
          elif echo "${_COMMIT_MESSAGE}" | grep -q "desplegar pedidos"; then
            export _SERVICE="pedidos"
          elif echo "${_COMMIT_MESSAGE}" | grep -q "desplegar productos"; then
            export _SERVICE="productos"
          elif echo "${_COMMIT_MESSAGE}" | grep -q "desplegar rutas"; then
            export _SERVICE="rutas"
          elif echo "${_COMMIT_MESSAGE}" | grep -q "desplegar todos"; then
            export _SERVICE="todos"
          else
            echo "No service specified in commit message"
            exit 1
          fi
        fi

        # Build and push services
        SERVICES=("orquestador" "pedidos" "productos" "rutas")

        for svc in "${SERVICES[@]}"; do
          if [ "${_SERVICE}" = "$svc" ] || [ "${_SERVICE}" = "todos" ]; then
            echo "Building and pushing $svc"
            docker build -t us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA ./$svc
            docker push us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA
          fi
        done

  # Deploy to Cloud Run with env file per service
  - name: "gcr.io/cloud-builders/gcloud"
    id: "deploy"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Detect service from commit message if _SERVICE is "none"
        if [ "${_SERVICE}" = "none" ]; then
          if echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar orquestador\]"; then
            export _SERVICE="orquestador"
          elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar pedidos\]"; then
            export _SERVICE="pedidos"
          elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar productos\]"; then
            export _SERVICE="productos"
          elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar rutas\]"; then
            export _SERVICE="rutas"
          elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar todos\]"; then
            export _SERVICE="todos"
          else
            echo "No service specified in commit message"
            exit 1
          fi
        fi

        SERVICES=("orquestador" "pedidos" "productos" "rutas")

        for svc in "${SERVICES[@]}"; do
          if [ "${_SERVICE}" = "$svc" ] || [ "${_SERVICE}" = "todos" ]; then
            echo "Creating .env.production for $svc"
            
            # Create empty env file
            > ./$svc/.env.production
            
            if [ "$svc" = "orquestador" ]; then
              # Orquestador specific environment variables
              echo "URL_PEDIDOS=${_URL_PEDIDOS}" >> ./$svc/.env.production
              echo "URL_PRODUCTOS=${_URL_PRODUCTOS}" >> ./$svc/.env.production
              echo "URL_RUTAS=${_URL_RUTAS}" >> ./$svc/.env.production
              echo "URL_DEEPSEEK=${_URL_DEEPSEEK}" >> ./$svc/.env.production
              echo "DEEPSEEK_MODEL=${_DEEPSEEK_MODEL}" >> ./$svc/.env.production
              echo "DEEPSEEK_API_KEY=$(gcloud secrets versions access latest --secret=deepseek_api_key --format='get(payload.data)' --project=$PROJECT_ID | base64 --decode)" >> ./$svc/.env.production

              # Deploy orquestador
              echo "Deploying $svc to Cloud Run"
              gcloud run deploy $svc \
                --image us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA \
                --region us-central1 \
                --platform managed \
                --port 3000 \
                --memory 512Mi \
                --cpu 1 \
                --min-instances 0 \
                --max-instances 1 \
                --allow-unauthenticated \
            else
              # Database services environment variables
              echo "DB_HOST=/cloudsql/$PROJECT_ID:us-central1:$svc" >> ./$svc/.env.production
              echo "DB_USER=${_DB_USER}" >> ./$svc/.env.production
              echo "DB_PORT=${_DB_PORT}" >> ./$svc/.env.production
              echo "DB_NAME=${_DB_NAME}" >> ./$svc/.env.production
              echo "DB_PASSWORD=${_DB_PASSWORD}" >> ./$svc/.env.production

              # Deploy database services
              echo "Deploying $svc to Cloud Run"
              gcloud run deploy $svc \
                --image us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA \
                --cloud-sql-instance $PROJECT_ID:us-central1:$svc \
                --region us-central1 \
                --platform managed \
                --port 3000 \
                --memory 512Mi \
                --cpu 1 \
                --min-instances 0 \
                --max-instances 1 \
                --allow-unauthenticated \
            fi
          fi
        done

timeout: "1800s"
