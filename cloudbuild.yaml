options:
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON

substitutions:
  _PORT: "3000"

steps:
  # Build and push to Artifact Registry
  - name: "gcr.io/cloud-builders/gcloud"
    id: "build-and-push"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "_COMMIT_MESSAGE is: '${_COMMIT_MESSAGE}'"

        _SERVICE=""

        if echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar orquestador\]"; then
          _SERVICE="orquestador"
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar pedidos\]"; then
          _SERVICE="pedidos"
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar productos\]"; then
          _SERVICE="productos"
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar rutas\]"; then
          _SERVICE="rutas"
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar todos\]"; then
          _SERVICE="todos"
        else
          echo "❌ No service specified in commit message"
          exit 1
        fi

        echo "✅ Detected service: $_SERVICE"

        gcloud auth configure-docker us-central1-docker.pkg.dev

        SERVICES=("orquestador" "pedidos" "productos" "rutas")

        for svc in "${SERVICES[@]}"; do
          if [ "$_SERVICE" = "$svc" ] || [ "$_SERVICE" = "todos" ]; then
            echo "📦 Building and pushing $svc"
            docker build -t gcr.io/$PROJECT_ID/$svc:$COMMIT_SHA ./$svc
            docker tag gcr.io/$PROJECT_ID/$svc:$COMMIT_SHA \
              us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA
            docker push us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA
          fi
        done

  # Deploy to Cloud Run with env file per service
  - name: "gcr.io/cloud-builders/gcloud"
    id: "deploy"
    entrypoint: "bash"
    args:
      - "-c"
      - |
      echo "_COMMIT_MESSAGE is: '${_COMMIT_MESSAGE}'"

      _SERVICE=""

      if echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar orquestador\]"; then
        _SERVICE="orquestador"
      elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar pedidos\]"; then
        _SERVICE="pedidos"
      elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar productos\]"; then
        _SERVICE="productos"
      elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar rutas\]"; then
        _SERVICE="rutas"
      elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar todos\]"; then
        _SERVICE="todos"
      else
        echo "❌ No service specified in commit message"
        exit 1
      fi

      echo "✅ Detected service: $_SERVICE"


        SERVICES=("orquestador" "pedidos" "productos" "rutas")

        for svc in "${SERVICES[@]}"; do
          if [ "$_SERVICE" = "$svc" ] || [ "$_SERVICE" = "todos" ]; then
            echo "📝 Creating .env.production for $svc"

            if [ "$svc" = "orquestador" ]; then
              echo "URL_PEDIDOS=${_URL_PEDIDOS}" > ./$svc/.env.production
              echo "URL_PRODUCTOS=${_URL_PRODUCTOS}" >> ./$svc/.env.production
              echo "URL_RUTAS=${_URL_RUTAS}" >> ./$svc/.env.production
              echo "URL_DEEPSEEK=${_URL_DEEPSEEK}" >> ./$svc/.env.production
              echo "DEEPSEEK_MODEL=${_DEEPSEEK_MODEL}" >> ./$svc/.env.production
              echo "DEEPSEEK_API_KEY=$(gcloud secrets versions access latest --secret=deepseek_api_key --format='get(payload.data)' --project=$PROJECT_ID | base64 --decode)" >> ./$svc/.env.production
            else
              echo "DB_HOST=/cloudsql/$PROJECT_ID:us-central1:$svc" > ./$svc/.env.production
              echo "DB_USER=${_DB_USER}" >> ./$svc/.env.production
              echo "DB_PORT=${_DB_PORT}" >> ./$svc/.env.production
              echo "DB_NAME=${_DB_NAME}" >> ./$svc/.env.production
              echo "DB_PASSWORD=${_DB_PASSWORD}" >> ./$svc/.env.production
            fi

            echo "🚀 Deploying $svc to Cloud Run"
            gcloud run deploy $svc \
              --image us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA \
              --region us-central1 \
              --platform managed \
              --port 3000 \
              --memory 512Mi \
              --cpu 1 \
              --min-instances 0 \
              --max-instances 1 \
              --allow-unauthenticated
          fi
        done

timeout: "1800s"
