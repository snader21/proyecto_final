options:
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON

substitutions:
  _PORT: "3000"

steps:
  # Step 1: Detect service to deploy.
  - name: "node"
    id: "detect-service"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "_COMMIT_MESSAGE is: '${_COMMIT_MESSAGE}'"

        if echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar orquestador\]"; then
          echo "orquestador" > /workspace/service.txt
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar pedidos\]"; then
          echo "pedidos" > /workspace/service.txt
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar productos\]"; then
          echo "productos" > /workspace/service.txt
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar rutas\]"; then
          echo "rutas" > /workspace/service.txt
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar fabricantes\]"; then
          echo "fabricantes" > /workspace/service.txt
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar vendedores\]"; then
          echo "vendedores" > /workspace/service.txt
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar clientes\]"; then
          echo "clientes" > /workspace/service.txt
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar usuarios\]"; then
          echo "usuarios" > /workspace/service.txt
        elif echo "${_COMMIT_MESSAGE}" | grep -q "\[desplegar todos\]"; then
          echo "todos" > /workspace/service.txt
        else
          echo "‚ùå No service specified in commit message"
          exit 1
        fi

        echo "‚úÖ Detected service: $(cat /workspace/service.txt)"

  # Step 2: Run tests
  - name: "node"
    id: "run-tests"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "üß™ Running tests for services:"
        cat /workspace/service.txt

        ALL_TESTS_PASSED=true

        while IFS= read -r svc; do
          if [ "$svc" = "todos" ]; then
            svc_list=("orquestador" "pedidos" "productos" "rutas" "fabricantes" "vendedores" "clientes" "usuarios")
          else
            svc_list=("$svc")
          fi

          for s in "${svc_list[@]}"; do
            echo "‚è≥ Running tests for $s..."
            cd $s
            npm install
            if ! npm run test; then
              echo "‚ùå Tests failed for $s"
              ALL_TESTS_PASSED=false
            fi
            cd ..
          done
        done < /workspace/service.txt

        if [ "$$ALL_TESTS_PASSED" = false ]; then
          echo "üö´ Some tests failed. Exiting."
          exit 1
        fi

  # Step 3: Generate .env files per service
  - name: "gcr.io/cloud-builders/gcloud"
    id: "generate-env"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        SERVICES=("orquestador" "pedidos" "productos" "rutas" "fabricantes" "vendedores" "clientes" "usuarios")

        for svc in "${SERVICES[@]}"; do
          if [ "$(cat /workspace/service.txt)" = "$svc" ] || [ "$(cat /workspace/service.txt)" = "todos" ]; then
            echo "üìù Generating .env for $svc"

            mkdir -p ./$svc

            if [ "$svc" = "orquestador" ]; then
              echo "URL_PEDIDOS=${_URL_PEDIDOS}" > ./$svc/.env
              echo "URL_PRODUCTOS=${_URL_PRODUCTOS}" >> ./$svc/.env
              echo "URL_FABRICANTES=${_URL_FABRICANTES}" >> ./$svc/.env
              echo "URL_RUTAS=${_URL_RUTAS}" >> ./$svc/.env
              echo "URL_DEEPSEEK=${_URL_DEEPSEEK}" >> ./$svc/.env
              echo "URL_VENDEDORES=${_URL_VENDEDORES}" >> ./$svc/.env
              echo "URL_CLIENTES=${_URL_CLIENTES}" >> ./$svc/.env
              echo "URL_USUARIOS=${_URL_USUARIOS}" >> ./$svc/.env
              echo "DEEPSEEK_MODEL=${_DEEPSEEK_MODEL}" >> ./$svc/.env
              echo "DEEPSEEK_API_KEY=$(gcloud secrets versions access latest --secret=deepseek_api_key --format='get(payload.data)' --project=$PROJECT_ID | base64 --decode)" >> ./$svc/.env
              echo "MAPBOX_API_KEY=${_MAPBOX_API_KEY}" >> ./$svc/.env
              echo "JWT_SECRET=${_JWT_SECRET}" >> ./$svc/.env
            else
              echo "DB_HOST=/cloudsql/$PROJECT_ID:us-central1:$svc" > ./$svc/.env
              echo "DB_USER=${_DB_USER}" >> ./$svc/.env
              echo "DB_PORT=${_DB_PORT}" >> ./$svc/.env
              echo "DB_NAME=$svc" >> ./$svc/.env
              echo "DB_PASSWORD=${_DB_PASSWORD}" >> ./$svc/.env
              if [ "$svc" = "usuarios" ]; then
                echo "JWT_SECRET=${_JWT_SECRET}" >> ./$svc/.env
              fi
              if [ "$svc" = "productos" ]; then
                echo "GCP_BUCKET_NAME=${_GCP_BUCKET_NAME}" >> ./$svc/.env
                echo "GCP_CLIENT_EMAIL=${_GCP_CLIENT_EMAIL}" >> ./$svc/.env
                echo "GCP_PRIVATE_KEY=${_GCP_PRIVATE_KEY}" >> ./$svc/.env
                echo "GCP_PROJECT_ID=${_GCP_PROJECT_ID}" >> ./$svc/.env
              fi
            fi
          fi
        done

  # Step 4: Auth for Docker
  - name: "gcr.io/cloud-builders/gcloud"
    id: "auth-docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        gcloud auth configure-docker us-central1-docker.pkg.dev

  # Step 5: Build and push
  - name: "gcr.io/cloud-builders/docker"
    id: "build-and-push"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        SERVICES=("orquestador" "pedidos" "productos" "rutas" "fabricantes" "vendedores" "clientes" "usuarios")

        for svc in "${SERVICES[@]}"; do
          if [ "$(cat /workspace/service.txt)" = "$svc" ] || [ "$(cat /workspace/service.txt)" = "todos" ]; then
            echo "üì¶ Building and pushing $svc"
            docker build -t gcr.io/$PROJECT_ID/$svc:$COMMIT_SHA ./$svc
            docker tag gcr.io/$PROJECT_ID/$svc:$COMMIT_SHA \
              us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA
            docker push us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA
          fi
        done

  # Step 6: Deploy to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: "deploy"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        SERVICES=("orquestador" "pedidos" "productos" "rutas" "fabricantes" "vendedores" "clientes" "usuarios")

        for svc in "${SERVICES[@]}"; do
          if [ "$(cat /workspace/service.txt)" = "$svc" ] || [ "$(cat /workspace/service.txt)" = "todos" ]; then
            echo "üöÄ Deploying $svc to Cloud Run"

            if [ "$svc" = "orquestador" ]; then
              gcloud run deploy $svc \
                --image us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA \
                --region us-central1 \
                --platform managed \
                --port 3000 \
                --memory 512Mi \
                --cpu 1 \
                --min-instances 0 \
                --max-instances 1 \
                --allow-unauthenticated

              gcloud run services add-iam-policy-binding $svc \
                --region us-central1 \
                --platform managed \
                --member="allUsers" \
                --role="roles/run.invoker"
            else
              gcloud run deploy $svc \
                --image us-central1-docker.pkg.dev/$PROJECT_ID/proyecto-final/$svc:$COMMIT_SHA \
                --region us-central1 \
                --platform managed \
                --port 3000 \
                --memory 512Mi \
                --cpu 1 \
                --min-instances 0 \
                --max-instances 1 \
                --allow-unauthenticated \
                --add-cloudsql-instances $PROJECT_ID:us-central1:$svc

              gcloud run services add-iam-policy-binding $svc \
                --region us-central1 \
                --platform managed \
                --member="allUsers" \
                --role="roles/run.invoker"
            fi
          fi
        done

timeout: "1800s"
